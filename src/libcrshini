#!/usr/bin/env bash

set -eu

: "${_crshini_version:="0.1"}"
: "${_crshini_stdin:=false}"
: "${_crshini_debug:=false}"
: "${_crshini_output:=-}"
: "${_crshini_temp:="/tmp/libcrshini"}"

# Message function
_crshini_msg_common(){
    local _funcname="${FUNCNAME[2]#_crshini_}"
    echo "[libcrshini] $(yes " " 2> /dev/null  | head -n "$(( 7 - ${#_funcname} ))" | tr -d "\n"; ) ${_funcname} ${*}" >&2
}
_crshini_msg_err(){ _crshini_msg_common "Error ${*}"; }
_crshini_msg_dbg(){ _crshini_msg_common " Info ${*}"; }
_crshini_msg_wrn(){ _crshini_msg_common " Warn ${*}"; }
_crshini_msg_dbg(){ 
    if [[ "${_crshini_debug-false}" = true ]]; then
        _crshini_msg_common "Debug ${*}";
    fi
}

# Output function
_crshini_print(){
    if [[ "${_crshini_output}" = "-" ]]; then
        [[ -n "${*}" ]] && echo "${@}"
    else
        _crshini_output="$(realpath "${_crshini_output}")"
        echo "${@}" > "${_crshini_output}"
    fi
    return 0
}

# Write Temp file
_crshini_write_temp(){
    echo "${@}" > "${_crshini_temp}"
}

# Get index number from string
# _crshini_index_from_str string "${array[@]}"
_crshini_index_from_str(){
    local __string_to_find="${1}" __index
    shift 1
    local __array=("${@}")
    for __index in $(seq 0 "$(( "${#__array[@]}" - 1 ))"); do
        [[ "${__array["${__index}"]}" = "${__string_to_find}" ]] && echo "${__index}"
    done
    return 0
}

# Check file
# _crshini_chkfile file
_crshini_chkfile(){
    local _file="${1-""}" _return=0
    if [[ -z "${_file}"   ]]; then
        _crshini_msg_err "Please specify the file path" 
        _return 1
    elif [[ ! -f "${_file}" ]]; then
        _crshini_msg_err "No such file or directory"
        _return=1
    elif [[ ! "$(file "${_file}" --mime-type -F ":" | cut -d ":" -f 2 | tr -d " ")" = "text/plain" ]]; then
        _crshini_msg_err "Please specity text file"
        _return=1
    fi
    return "${_return}"
}


# --get command
# _crshini_get file [section] [param]
_crshini_get(){
    # Set variables
    local _crshini_get_fileline=() _crshini_get_output=() __line _crshini_get_insection=false _crshini_get_file _crshini_get_section  _crshini_get_param _crshini_get_linemode _crshini_get_current_section
    : "${_crshini_get_linemode:=false}" "${_crshini_get_format:=default}" "${_crshini_get_current_section:=""}"

    ! [[ "${_crshini_get_format}" = "lines" || "${_crshini_get_format}" = "default" || "${_crshini_get_format}" = "ini" || "${_crshini_get_format}" = "sh" ]] && _crshini_msg_err "Incorrect format" && return 1

    # 行を配列に代入
    if [[ "${_crshini_stdin}" = true ]]; then
        readarray -t _crshini_get_fileline
    else
        _crshini_get_file="${1}"
        shift 1
        _crshini_chkfile "${_crshini_get_file}"
        readarray -t _crshini_get_fileline < "${_crshini_get_file}"
    fi

    _crshini_get_section="${1-""}" _crshini_get_param="${2-""}"

    # 1行ずつ処理を行う
    for __line in $(seq "${#_crshini_get_fileline[@]}"); do
        #[[ -z "${_crshini_get_fileline[$(( __line - 1 ))]%%=*}" ]] && continue
        [[ "${_crshini_get_fileline[$(( __line - 1 ))]}" = "#"* ]] && continue
        if [[ -n "${_crshini_get_section}" ]]; then
            case "${_crshini_get_fileline[$(( __line - 1 ))]}" in
                "#"* | "")
                    continue
                    ;;
                *"[${_crshini_get_section}]"*)
                    _crshini_get_insection=true
                    _crshini_msg_dbg "${__line}行目でセクション${_crshini_get_section}に入りました"
                    continue
                    ;;
                *"["*"]"*)
                    _crshini_get_insection=false
                    continue
                    ;;
            esac
        elif [[ "$(echo "${_crshini_get_fileline[$(( __line - 1 ))]}" | sed "s|^\s*\[|\[|g; s|\]\s*$|\]|g")" = "["*"]" ]]; then
            case "${_crshini_get_format}" in
                "default" | "sh")
                    _crshini_get_output+=("$(echo "${_crshini_get_fileline[$(( __line - 1 ))]%%#*}" | sed "s|^\s*\[||g; s|\]\s*$||g")")
                    ;;
                "ini")
                    _crshini_get_output+=("${_crshini_get_fileline[$(( __line - 1 ))]}")
                    ;;
                "lines")
                    _crshini_get_current_section="$(echo "${_crshini_get_fileline[$(( __line - 1 ))]%%#*}" | sed "s|^\s*\[||g; s|\]\s*$||g")"
                    continue
                    ;;
            esac
        fi

        if [[ -n "${_crshini_get_section}" ]]; then
            if [[ "${_crshini_get_insection}" = true ]]; then
                if [[ -z "${_crshini_get_param}" ]] || [[ "${_crshini_get_fileline[$(( __line - 1 ))]%%=*}" = "${_crshini_get_param}" ]]; then
                    if [[ -n "${_crshini_get_param}" ]]; then
                        _crshini_msg_dbg "${__line}行目に発見しました"
                        if [[ "${_crshini_get_linemode}" = true ]]; then
                            _crshini_get_output+=("${__line}")
                            continue
                        fi
                    fi
                    case "${_crshini_get_format}" in
                        "default")
                            [[ -z "${_crshini_get_param}" ]] && _crshini_get_output+=("${_crshini_get_fileline[$(( __line - 1 ))]%%=*}")
                            [[ -n "${_crshini_get_param}" ]] && _crshini_get_output+=("${_crshini_get_fileline[$(( __line - 1 ))]##*=}")
                            ;;
                        "sh")
                            _crshini_get_output+=("${_crshini_get_fileline[$(( __line - 1 ))]%%=*}=\"${_crshini_get_fileline[$(( __line - 1 ))]##*=}\"")
                            ;;
                        "lines")
                            _crshini_get_output+=("[ ${_crshini_get_section} ] ${_crshini_get_fileline[$(( __line - 1 ))]%%=*} = ${_crshini_get_fileline[$(( __line - 1 ))]##*=}")
                            ;;
                        "ini")
                            _crshini_get_output+=("${_crshini_get_fileline[$(( __line - 1 ))]%%=*} = ${_crshini_get_fileline[$(( __line - 1 ))]##*=}")
                            ;;
                    esac
                fi
            else
                continue
            fi
        else
            # セクションが空でフォーマットがlines
            if [[ -z "${_crshini_get_fileline[$(( __line - 1 ))]%%=*}" ]] || [[ -z "${_crshini_get_fileline[$(( __line - 1 ))]##*=}" ]]; then
                continue
            elif [[ -n "${_crshini_get_current_section}" ]]; then
                _crshini_get_output+=("[ ${_crshini_get_current_section} ] ${_crshini_get_fileline[$(( __line - 1 ))]%%=*} = ${_crshini_get_fileline[$(( __line - 1 ))]##*=}")
            fi
        fi
    done
    if [[ -z "${_crshini_get_param}" ]]; then
        _crshini_print "$(printf "%s\n" "${_crshini_get_output[@]}")"
    elif (( "${#_crshini_get_output[@]}" != 0 )); then
        _crshini_print "${_crshini_get_output[-1]}"
    fi
    return 0
}

# --set command
# _crshini_set file section param value
_crshini_set(){
    # Set variables
    local _crshini_set_fileline=() _crshini_set_section _crshini_set_param _crshini_set_value __line _crshini_set_insert_line _crshini_set_writed=false _crshini_set_modline
    if [[ "${_crshini_stdin}" = true ]]; then
        cat - > "${_crshini_temp}"
        _crshini_set_file="${_crshini_temp}"
    else
        _crshini_set_file="${1}"
        shift 1
        _crshini_chkfile "${_crshini_set_file}"
    fi  

    readarray -t _crshini_set_fileline < "${_crshini_set_file}"
    _crshini_set_section="${1=""}" _crshini_set_param="${2-""}" _crshini_set_value="${3-""}"
    [[ -z "${_crshini_set_section+SET}" ]] && _crshini_msg_err "Please specity section" && return 1
    [[ -z "${_crshini_set_param+SET}" ]] && _crshini_msg_err "Please specity parameter" && return 1
    [[ -z "${_crshini_set_value+SET}" ]] && _crshini_msg_err "Please specity value" && return 1

    _crshini_msg_dbg "セクション: \"${_crshini_set_section}\""
    _crshini_msg_dbg "パラメータ: \"${_crshini_set_param}\""

    # Copy
    readarray -t _crshini_set_sectionlist < <(printf "%s\n" "${_crshini_set_fileline[@]}" | _crshini_output="-" _crshini_stdin=true _crshini_get)
    readarray -t _crshini_set_paramlist < <(printf "%s\n" "${_crshini_set_fileline[@]}" | _crshini_output="-" _crshini_stdin=true _crshini_get "${_crshini_set_section}")
    _crshini_msg_dbg "見つかったセクション: $(printf "[%s] " "${_crshini_set_sectionlist[@]}")"

    # Find and set section
    if ! printf "%s\n" "${_crshini_set_sectionlist[@]}" | grep -x "${_crshini_set_section}" 1> /dev/null 2>&1; then
        _crshini_msg_dbg "新しいセクション${_crshini_set_section}を作成しました"
        _crshini_set_fileline+=("" "[${_crshini_set_section}]")
        _crshini_set_sectionlist+=("${_crshini_set_section}")
    fi

    #printf "%s\n" "${_crshini_set_fileline[@]}"


    # デバッグメッセージ
    _crshini_msg_dbg "セクション内に${#_crshini_set_paramlist[@]}個のパラメータを発見しました"

    # Find and Set param
    if printf "%s\n" "${_crshini_set_paramlist[@]}" | grep -x "${_crshini_set_param}" 1> /dev/null 2>&1; then
        _crshini_msg_dbg "値の書き換えを行います"
        _crshini_set_insert_line=$(( "$(_crshini_output="-" _crshini_get_linemode=true _crshini_get "${_crshini_set_file}" "${_crshini_set_section}" "${_crshini_set_param}")" ))
    elif (( "${#_crshini_set_paramlist[@]}" == 0 )) || [[ -z "${_crshini_set_paramlist[*]}" ]]; then
        _crshini_msg_dbg "空のセクションに値を追加します"
        _crshini_set_insert_line="$(( $(_crshini_output="-" _crshini_index_from_str "[${_crshini_set_section}]" "${_crshini_set_fileline[@]}") + 2))"
    else
        _crshini_msg_dbg "セクションの最後に追記します"
        _crshini_set_insert_line="$( _crshini_stdin=true _crshini_output="-" _crshini_get_linemode=true _crshini_get  "${_crshini_set_section}" "${_crshini_set_paramlist[-1]}" < "${_crshini_set_file}" )"
    fi
    
    _crshini_msg_dbg "${_crshini_set_insert_line}行目に設定されました"

    for __line in $( seq $(( "${#_crshini_set_fileline[@]}" + 1 )) ); do
        _crshini_set_now_line="${_crshini_set_fileline[$(( __line - 1 ))]-""}" _crshini_set_next_line="${_crshini_set_fileline[${__line}]-""}"
        if [[ "${_crshini_set_writed}" = true ]] ; then
            if [[ -n "${_crshini_set_now_line+SET}" ]]; then
                _crshini_set_modline+=("${_crshini_set_now_line}")
                continue
            fi
        elif ! (( __line == _crshini_set_insert_line)); then
            [[ -n "${_crshini_set_now_line+SET}" ]] && _crshini_set_modline+=("${_crshini_set_now_line}")
        else
            _crshini_msg_dbg "${__line}行目を書き換えました"
            _crshini_set_modline+=("${_crshini_set_param}=${_crshini_set_value}") _crshini_set_writed=true

            if [[ -z "${_crshini_set_next_line+SET}" ]] || [[ "${_crshini_set_next_line}" = "["*"]" ]]; then
                _crshini_set_modline+=("")
            fi
        fi
    done

    # Output
    _crshini_print "$(for __line in "${_crshini_set_modline[@]}"; do echo -e "${__line}"; done)"
}

# --merge command
# _crshini_set file [section]
_crshini_merge(){
    # Set variables
    local _crshini_merge_file="${1}" _crshini_merge_section="${2-""}" _crshini_merge_source __section _crshini_merge_sectionlist=() _crshini_merge_source
    _crshini_merge_source="$(cat -)"
    _crshini_chkfile "${_crshini_merge_file}"

    # Get sections
    if [[ -z "${_crshini_merge_section}" ]]; then
        while read -r __section; do
            if ! printf "%s\n" "${_crshini_merge_sectionlist[@]}" | grep -x "${__section}" 2> /dev/null 1>&2; then
                _crshini_msg_dbg "新しいセクション${__section}を見つけました"
                _crshini_merge_sectionlist+=("${__section}")
            fi
        done < <(echo "${_crshini_merge_source}" | _crshini_stdin=true _crshini_output=- _crshini_get)
    else
        _crshini_merge_sectionlist+=("${_crshini_merge_section}")
    fi

    # Set Param
    local _crshini_merge_output __param __value
    _crshini_merge_output="$(cat "${_crshini_merge_file}")" 
    for __section in "${_crshini_merge_sectionlist[@]}"; do
        _crshini_msg_dbg "${__section}に入りました"
        while read -r __param; do
            _crshini_msg_dbg "${__param}の処理を行います"
            __value="$(echo "${_crshini_merge_source}" | _crshini_stdin=true _crshini_output=- _crshini_get "${__section}" "${__param}")"
            _crshini_msg_dbg "${__param}の値は${__value}です"
            _crshini_merge_output="$(echo "${_crshini_merge_output}" | _crshini_stdin=true _crshini_output=- _crshini_set "${__section}" "${__param}" "${__value}")"
        done < <(echo "${_crshini_merge_source}" | _crshini_stdin=true _crshini_output=- _crshini_get "${__section}")
    done

    _crshini_print "${_crshini_merge_output}"
}


# --del command
# _crshini_del file section [list param]
_crshini_del(){
    # Set variables
    local _crshini_del_fileline=() _crshini_del_output=() __line _crshini_del_insection=false _crshini_del_file _crshini_del_section  _crshini_del_param _crshini_del_lineout
    if [[ "${_crshini_stdin}" = true ]]; then
        readarray -t _crshini_del_fileline
    else
        _crshini_del_file="${1}"
        shift 1
        _crshini_chkfile "${_crshini_del_file}"
        readarray -t _crshini_del_fileline < "${_crshini_del_file}"
    fi

    _crshini_del_section="${1-""}" && shift 1
    _crshini_del_param=("${@}")

    for __line in $(seq "${#_crshini_del_fileline[@]}"); do
        _crshini_del_lineout=true
        case "${_crshini_del_fileline[$(( __line - 1 ))]}" in
            "[${_crshini_del_section}]")
                _crshini_del_insection=true
                _crshini_msg_dbg "${__line}行目でセクション${_crshini_del_section}に入りました"
                ;;
            "["*"]")
                _crshini_del_insection=false
                ;;
        esac

        if [[ "${_crshini_del_insection}"  = false ]]; then
            _crshini_del_lineout=true # 出力する
        elif (( "${#_crshini_del_param[@]}" == 0 )); then
            _crshini_del_lineout=false # セクション内にいて、パラメータが設定されていないので出力しない
        else
            for __param in "${_crshini_del_param[@]}"; do
                if [[ "${_crshini_del_fileline[$(( __line - 1 ))]%%=*}" = "${__param}" ]]; then
                    _crshini_del_lineout=false # パラメータの削除一覧に該当したので出力しない
                    break
                fi
            done
        fi
         
        if [[ "${_crshini_del_lineout}" = true ]]; then # _crshini_del_lineoutがtrueなら出力する、falseなら出力しない
            _crshini_del_output+=("${_crshini_del_fileline[$(( __line - 1 ))]}")
        else
            _crshini_msg_dbg "${__line}行目を削除しました"
        fi
    done

    _crshini_print "$(for __line in "${_crshini_del_output[@]}"; do echo -e "${__line}"; done)"
    return 0
}
