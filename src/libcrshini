#!/usr/bin/env bash

set -eu

: "${_crshini_version:="0.1"}"
: "${_crshini_stdin:=false}"
: "${_crshini_debug:=false}"
: "${_crshini_output:=-}"
: "${_crshini_temp:="/tmp/libcrshini"}"

# Message function
_crshini_msg_common(){
    local _funcname="${FUNCNAME[2]#_crshini}"
    echo "[libcrshini] $(yes " " 2> /dev/null  | head -n "$(( 6 - ${#_funcname} ))" | tr -d "\n"; ) ${_funcname} ${*}" >&2
}
_crshini_msg_err(){ _crshini_msg_common "Error ${*}"; }
_crshini_msg_dbg(){ _crshini_msg_common " Info ${*}"; }
_crshini_msg_wrn(){ _crshini_msg_common " Warn ${*}"; }
_crshini_msg_dbg(){ 
    if [[ "${_crshini_debug-false}" = true ]]; then
        _crshini_msg_common "Debug ${*}";
    fi
}

# Output function
_crshini_print(){
    if [[ "${_crshini_output}" = "-" ]]; then
        echo "${@}"
    else
        _crshini_output="$(realpath "${_crshini_output}")"
        echo "${@}" > "${_crshini_output}"
    fi
}

# Write Temp file
_crshini_write_temp(){
    echo "${@}" > "${_crshini_temp}"
}

# Get index number from string
# _crshini_index_from_str string "${array[@]}"
_crshini_index_from_str(){
    local __string_to_find="${1}" __index
    shift 1
    local __array=("${@}")
    for __index in $(seq 0 "$(( "${#__array[@]}" - 1 ))"); do
        [[ "${__array["${__index}"]}" = "${__string_to_find}" ]] && echo "${__index}"
    done
    return 0
}

# Check file
# _crshini_chkfile file
_crshini_chkfile(){
    local _file="${1-""}" _return=0
    if [[ -z "${_file}"   ]]; then
        _crshini_msg_err "Please specify the file path" 
        _return 1
    elif [[ ! -f "${_file}" ]]; then
        _crshini_msg_err "No such file or directory"
        _return=1
    elif [[ ! "$(file "${_file}" --mime-type -F ":" | cut -d ":" -f 2 | tr -d " ")" = "text/plain" ]]; then
        _crshini_msg_err "Please specity text file"
        _return=1
    fi
    return "${_return}"
}


# --get command
# _crshini_get file [section] [param]
_crshini_get(){
    # Set variables
    local _crshini_get_fileline=() _crshini_get_output=() __line _crshini_get_insection=false _crshini_get_file _crshini_get_section  _crshini_get_param _crshini_get_linemode
    : "${_crshini_get_linemode:=false}"

    if [[ "${_crshini_stdin}" = true ]]; then
        readarray -t _crshini_get_fileline
    else
        _crshini_get_file="${1}"
        shift 1
        _crshini_chkfile "${_crshini_get_file}"
        readarray -t _crshini_get_fileline < "${_crshini_get_file}"
    fi

    _crshini_get_section="${1-""}" _crshini_get_param="${2-""}"

    if [[ -z "${_crshini_get_section}" ]]; then
        printf "%s\n" "${_crshini_get_fileline[@]}" | grep -E "^\[.+\]$" | sed "s|^\[||g; s|\]$||g"
    else
        for __line in $(seq "${#_crshini_get_fileline[@]}"); do
            case "${_crshini_get_fileline[$(( __line - 1 ))]}" in
                "[${_crshini_get_section}]")
                    _crshini_get_insection=true
                    _crshini_msg_dbg "${__line}行目でセクション${_crshini_get_section}に入りました"
                    continue
                    ;;
                "["*"]")
                    _crshini_get_insection=false
                    continue
                    ;;
                "" | "#"*)
                    continue
                    ;;
            esac
            if [[ "${_crshini_get_insection}" = true ]]; then
                if [[ -z "${_crshini_get_param}" ]]; then
                    _crshini_get_output+=("${_crshini_get_fileline[$(( __line - 1 ))]%%=*}")
                elif [[ "${_crshini_get_fileline[$(( __line - 1 ))]%%=*}" = "${_crshini_get_param}" ]]; then
                    _crshini_msg_dbg "${__line}行目に発見しました"
                    if [[ "${_crshini_get_linemode}" = true ]]; then
                        _crshini_get_output+=("${__line}")
                    else
                        _crshini_get_output+=("${_crshini_get_fileline[$(( __line - 1 ))]##*=}")
                    fi
                fi
            else
                continue
            fi
        done
        if [[ -z "${_crshini_get_param}" ]]; then
            _crshini_print "$(printf "%s\n" "${_crshini_get_output[@]}")"
        elif (( "${#_crshini_get_output[@]}" != 0 )); then
            _crshini_print "${_crshini_get_output[-1]}"
        fi
    fi
    return 0
}

# --set command
# _crshini_set file section [param] [value]
_crshini_set(){
    # Set variables
    local _crshini_set_fileline=() _crshini_set_section _crshini_set_param _crshini_set_value __line _crshini_set_insert_line _crshini_set_writed=false _crshini_set_mode

    if [[ "${_crshini_stdin}" = true ]]; then
        cat - > "${_crshini_temp}"
        _crshini_set_file="${_crshini_temp}"
    else
        _crshini_set_file="${1}"
        shift 1
        _crshini_chkfile "${_crshini_set_file}"
    fi  

    
    readarray -t _crshini_set_fileline < "${_crshini_set_file}"

    _crshini_set_section="${1}" _crshini_set_param="${2-""}"  _crshini_set_value="${3-""}"

    _crshini_msg_dbg "セクション: \"${_crshini_set_section}\""
    _crshini_msg_dbg "パラメータ: \"${_crshini_set_param}\""


    # Copy
    local _crshini_set_modline
    readarray -t _crshini_set_sectionlist < <(printf "%s\n" "${_crshini_set_fileline[@]}" | _crshini_output="-" _crshini_stdin=true _crshini_get)
    readarray -t _crshini_set_paramlist < <(printf "%s\n" "${_crshini_set_fileline[@]}" | _crshini_output="-" _crshini_stdin=true _crshini_get "${_crshini_set_section}")

    _crshini_msg_dbg "見つかったセクション: $(printf "[%s] " "${_crshini_set_sectionlist[@]}")"

    # Find and set section
    if ! printf "%s\n" "${_crshini_set_sectionlist[@]}" | grep -x "${_crshini_set_section}" 1> /dev/null 2>&1; then
        _crshini_msg_dbg "新しいセクション${_crshini_set_section}を作成しました"
        _crshini_set_fileline+=("[${_crshini_set_section}]")
        _crshini_set_sectionlist+=("${_crshini_set_section}")
    fi

    # Backup
    #if [[ "$(realpath "${_crshini_set_file}")" = "$(realpath "${_crshini_output}")" ]]; then
    #    _crshini_msg_dbg "${_crshini_set_file}"
    #    cat "${_crshini_set_file}" > "${_crshini_temp}"
    #    _crshini_set_file="${_crshini_temp}"
    #fi

    # デバッグメッセージ
    _crshini_msg_dbg "セクション内に${#_crshini_set_paramlist[@]}個のパラメータを発見しました"

    # Find and Set param
    if printf "%s\n" "${_crshini_set_paramlist[@]}" | grep -x "${_crshini_set_param}" 1> /dev/null 2>&1; then
        _crshini_msg_dbg "値の書き換えを行います"
        _crshini_set_insert_line=$(( "$(_crshini_output="-" _crshini_get_linemode=true _crshini_get "${_crshini_set_file}" "${_crshini_set_section}" "${_crshini_set_param}")" ))
        _crshini_set_mode="rewrite"
    elif (( "${#_crshini_set_paramlist[@]}" == 0 )) || [[ -z "${_crshini_set_paramlist[*]}" ]]; then
        _crshini_msg_dbg "空のセクションに値を追加します"
        _crshini_set_insert_line="$(_crshini_output="-" _crshini_index_from_str "[${_crshini_set_section}]" "${_crshini_set_fileline[@]}")"
        _crshini_set_mode="new"
    else
        _crshini_msg_dbg "セクションの最後に追記します"
        _crshini_set_insert_line=$(( "$( _crshini_stdin=true _crshini_output="-" _crshini_get_linemode=true _crshini_get  "${_crshini_set_section}" "${_crshini_set_paramlist[-1]}" < "${_crshini_set_file}" )" - 1 ))
        _crshini_set_mode="new"
    fi
    
    _crshini_msg_dbg "${_crshini_set_insert_line}行目を基準にします"
    _crshini_msg_dbg "モードは${_crshini_set_mode}です"

    if [[ "${_crshini_set_mode}" = "new" ]]; then
        _crshini_set_insert_line=$(( _crshini_set_insert_line + 1 ))
    elif [[ "${_crshini_set_mode}" = "rewrite" ]]; then
        _crshini_set_insert_line=$(( _crshini_set_insert_line - 1 ))
    fi

    _crshini_msg_dbg "${_crshini_set_insert_line}行目に設定されました"

    for __line in $( seq 0 $(( "${#_crshini_set_fileline[@]}")) ); do
    
        if [[ "${_crshini_set_writed}" = true ]] ; then
            if [[ -n "${_crshini_set_fileline[${__line}]+SET}" ]]; then
                _crshini_set_modline+=("${_crshini_set_fileline[${__line}]}")
                continue
            fi
        fi

        if ! (( __line == _crshini_set_insert_line)); then
            if [[ -n "${_crshini_set_fileline[${__line}]+SET}" ]]; then
                _crshini_set_modline+=("${_crshini_set_fileline[${__line}]}")
            fi
        else
            _crshini_msg_dbg "${__line}行目を書き換えました"
            _crshini_set_modline+=("${_crshini_set_param}=${_crshini_set_value}")
            [[ "${_crshini_set_mode}" = "new" ]] && _crshini_set_modline+=("")
            _crshini_set_writed=true
        fi
    done

    # Output
    _crshini_print "$(for __line in "${_crshini_set_modline[@]}"; do echo -e "${__line}"; done)"
}
